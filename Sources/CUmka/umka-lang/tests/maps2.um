fn test1() {
	printf("\nTest 1\n")

	m := make(map[str]str)

	m["Hello" + " World"] = "English" + " EN"
	m["Salut" + " le Monde"] = "French" + " FR"

	printf(repr(validkey(m, "Salut le Monde")) + '\n')

	m = delete(m, "Salut le Monde")

	printf(repr(validkey(m, "Salut le Monde")) + '\n')

	a := m["Hello" + " World"]
	b := m["Privet" + " Mir"]
	c := m["Salut" + " le Monde"]
	
	printf(repr(a) + repr(b) + repr(c) + '\n')
	printf(repr(keys(m)) + '\n')
	printf(repr(valid(m)) + '\n')
	printf(repr(m) + '\n')	
}


fn test2() {
	printf("\nTest 2\n")

	type Pt = struct {
		x, y: int
	}

	var p: ^str

	{
		m2 := make(map[Pt]str)

		m2[Pt{5, 7}] = "Good"
		m2[Pt{42, 23}] = "Better"

		printf(repr(m2[Pt{42, 23}]) + repr(m2[Pt{11, 12}]) + repr(m2[Pt{5, 7}]) + '\n')

		k := keys(m2)
		printf(repr(len(m2)) + repr(k) + '\n')
		printf(repr(m2) + '\n')

		p = &m2[Pt{42, 23}]
	}

	printf(repr(p^) + '\n')	
}


fn test3() {
	printf("\nTest 3\n")

	var m3: map[int]int
	printf(repr(valid(m3)) + '\n')

	m3 = make(map[int]int)
	m3[1915] = 20
	printf(repr(valid(m3)) + repr(m3[1915]) + '\n')
	printf(repr(m3) + '\n')
}


fn foo(): ^map[[]int]str {
  return &map[[]int]str{
    []int{13, 15}: "So-so",
    []int{57, 89}: "Nice"}
}


fn test4() {
	printf("\nTest 4\n")
  
  m4 := foo()

	m4[[]int{2, 5}] = "OK"
	m4[[]int{7, 9}] = "Also OK"

	printf(repr(m4[[]int{2, 5}]) + '\n')
	printf(repr(m4^) + '\n')

	for key, item in m4 {
		printf(repr(key) + repr(item) + '\n')
	}	
}


fn test5() {
	printf("\nTest 5\n")

	type Any = interface{}
  m := make(map[int]Any)
  m[17] = 42
  m[19] = 53
  
  printf(repr(m) + '\n')
}


fn test*() {
	test1()
	test2()
	test3()
	test4()
	test5()
}


fn main() {
	test()
}
