import "std.um"

type (
    vec = struct {
        x, y: int
        p: [1000000] int
    }
    
    fooable = interface {
        foo(z: int)
    }
    
    fooable_barable = interface {
        bar(z: int)
        fooable
    }
)

fn (v: ^vec) foo(z: int) {
    std.println("   foo: " + std.itoa(v.x) + ", " + std.itoa(v.y) + ", " + std.itoa(z))
}

fn (v: ^vec) bar(z: int) {
    std.println("   bar: " + std.itoa(v.x) + ", " + std.itoa(v.y) + ", " + std.itoa(z))
}

fn proc_fooable(f: fooable) {
    std.println("proc_fooable:")
    f.foo(7)
}

fn proc_fooable_barable(fb: fooable_barable) {
    std.println("proc_fooable_barable:")
    fb.foo(9)
    fb.bar(11)
    proc_fooable(fb)
}

fn test*() {
    var fb: fooable_barable

    if true {
        v := new(vec)                
        v.x = 3
        v.y = 5
        fb = v
    }
    
    proc_fooable(fb)
    proc_fooable_barable(fb)

    f := fooable(fb)
}

fn main() {
    test()
}
    



